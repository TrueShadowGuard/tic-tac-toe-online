{"version":3,"sources":["index.js"],"names":["configure","enforceActions","App","observer","props","field","undefined","gameList","role","id","isConnected","isGameOn","isWaitingForPlayer","isMyTurn","gameId","socket","createGame","send","JSON","stringify","event","joinGame","data","turn","x","y","makeObservable","observable","WebSocket","onopen","console","log","onmessage","message","parse","alert","result","onclose","this","style","fontSize","className","disabled","onClick","map","row","cell","game","players","length","some","p","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab64b5a8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {observer} from 'mobx-react';\nimport {makeObservable, observable, configure} from 'mobx';\nimport './style.css';\n\nconfigure({\n  enforceActions: 'never'\n})\n\n\nconst App = observer(class extends React.Component {\n  field = undefined;\n  gameList = [];\n  role = undefined;\n  id = undefined;\n  isConnected = undefined;\n  isGameOn = false;\n  isWaitingForPlayer = false;\n  isMyTurn = undefined;\n\n  gameId = undefined;\n  socket = undefined;\n\n  constructor(props) {\n    super(props);\n    makeObservable(this, {\n      id: observable,\n      field: observable,\n      gameList: observable,\n      isConnected: observable,\n      isGameOn: observable,\n      role: observable,\n      isMyTurn: observable,\n      isWaitingForPlayer: observable,\n      gameId: observable\n    })\n    const socket = new WebSocket('ws://localhost:80');\n    this.socket = socket;\n\n    socket.onopen = () => {\n      console.log('connected to server')\n      this.isConnected = true;\n    }\n\n    socket.onmessage = message => {\n      message = JSON.parse(message.data);\n      console.log(message.event, message.data)\n\n      switch (message.event) {\n        case 'init':\n          this.id = message.data.id;\n          break;\n        case 'field':\n          this.field = message.data.field;\n          break;\n        case 'gameList':\n          this.gameList = message.data.gameList;\n          break;\n        case 'gameCreated':\n          this.isWaitingForPlayer = true;\n          this.gameId = message.data.gameId;\n          break;\n        case 'startGame':\n          this.isGameOn = true;\n          this.isWaitingForPlayer = false;\n          this.role = message.data.role;\n          this.isMyTurn = message.data.role === 'x';\n          this.gameId = message.data.gameId;\n          this.field = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']];\n          break;\n          case 'finishedGame':\n            this.isGameOn = false;\n            alert(`Игра окончена, ${message.data.result === 'draw' ? 'ничья' : message.data.result+' выграл'}`);\n      }\n    }\n\n    socket.onclose = () => {\n      this.isConnected = false;\n    }\n  }\n\n  createGame = () => {\n    this.socket.send(JSON.stringify({\n      event: 'createGame',\n    }));\n  }\n\n  joinGame = (gameId) => {\n    this.socket.send(JSON.stringify({event: 'joinGame', data: {gameId}}))\n  }\n\n  turn = (x, y) => {\n    this.socket.send(JSON.stringify({event: 'gameTurn', data: {gameId: this.gameId, role: this.role, x, y}}))\n  }\n\n  render() {\n    console.log('gameList', this.gameList)\n    return (\n      <div style={{fontSize: 32}}>\n        <div className=\"d-flex justify-content-between\">\n          <div>\n            <div>Ваш id: {this.id}</div>\n            <div>{this.isConnected ? 'Соединение с сервером установлено' : 'Соединение с сервером потеряно'}</div>\n            <button disabled={this.isGameOn || this.isWaitingForPlayer} onClick={this.createGame}>Создать игру</button>\n            {this.isWaitingForPlayer && <div>id лобби: {this.gameId}</div>}\n            {this.isGameOn && (\n              <div>\n                <div>Вы играете за {this.role}</div>\n                {\n                  this.field?.map((row, y) => (\n                    <div className=\"row\" key={y}>\n                      {row.map((cell, x) => <div className=\"cell\" key={x + '' + y}\n                                                 onClick={() => this.turn(x, y)}>{cell}</div>)}\n                    </div>\n                  ))}\n              </div>\n            )}\n          </div>\n          <div>\n            {this.gameList?.map(game => <div key={game.id}>\n              <h1>id:{game.id}</h1>\n              <div>{game.players?.length}/2</div>\n              <button onClick={() => this.joinGame(game.id)}\n                      disabled={game.players?.some(p => p.id === this.id) || game.players?.length === 2}\n              >Войти в игру\n              </button>\n            </div>)}\n          </div>\n        </div>\n      </div>\n    )\n  }\n});\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}